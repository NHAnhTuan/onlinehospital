#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace onlineHospital
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlHospital")]
	public partial class MemProfileDataClassesDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertDrug(Drug instance);
    partial void UpdateDrug(Drug instance);
    partial void DeleteDrug(Drug instance);
    partial void InsertEmergencyLevel(EmergencyLevel instance);
    partial void UpdateEmergencyLevel(EmergencyLevel instance);
    partial void DeleteEmergencyLevel(EmergencyLevel instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPatient_Document(Patient_Document instance);
    partial void UpdatePatient_Document(Patient_Document instance);
    partial void DeletePatient_Document(Patient_Document instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertPrescription_Detail(Prescription_Detail instance);
    partial void UpdatePrescription_Detail(Prescription_Detail instance);
    partial void DeletePrescription_Detail(Prescription_Detail instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertThread(Thread instance);
    partial void UpdateThread(Thread instance);
    partial void DeleteThread(Thread instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertVip_Account(Vip_Account instance);
    partial void UpdateVip_Account(Vip_Account instance);
    partial void DeleteVip_Account(Vip_Account instance);
    #endregion
		
		public MemProfileDataClassesDataContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OnlHospitalConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MemProfileDataClassesDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemProfileDataClassesDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemProfileDataClassesDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemProfileDataClassesDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Drug> Drugs
		{
			get
			{
				return this.GetTable<Drug>();
			}
		}
		
		public System.Data.Linq.Table<EmergencyLevel> EmergencyLevels
		{
			get
			{
				return this.GetTable<EmergencyLevel>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Patient_Document> Patient_Documents
		{
			get
			{
				return this.GetTable<Patient_Document>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<Prescription_Detail> Prescription_Details
		{
			get
			{
				return this.GetTable<Prescription_Detail>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Thread> Threads
		{
			get
			{
				return this.GetTable<Thread>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Vip_Account> Vip_Accounts
		{
			get
			{
				return this.GetTable<Vip_Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminID;
		
		private string _Account;
		
		private string _Address;
		
		private System.Nullable<int> _Age;
		
		private string _Email;
		
		private string _FullName;
		
		private System.Nullable<int> _AdminType;
		
		private string _avatarImageUrl;
		
		private EntitySet<Thread> _Threads;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAdminTypeChanging(System.Nullable<int> value);
    partial void OnAdminTypeChanged();
    partial void OnavatarImageUrlChanging(string value);
    partial void OnavatarImageUrlChanged();
    #endregion
		
		public Admin()
		{
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account", DbType="NVarChar(50)")]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminType", DbType="Int")]
		public System.Nullable<int> AdminType
		{
			get
			{
				return this._AdminType;
			}
			set
			{
				if ((this._AdminType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminTypeChanging(value);
					this.SendPropertyChanging();
					this._AdminType = value;
					this.SendPropertyChanged("AdminType");
					this.OnAdminTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarImageUrl", DbType="VarChar(MAX)")]
		public string avatarImageUrl
		{
			get
			{
				return this._avatarImageUrl;
			}
			set
			{
				if ((this._avatarImageUrl != value))
				{
					this.OnavatarImageUrlChanging(value);
					this.SendPropertyChanging();
					this._avatarImageUrl = value;
					this.SendPropertyChanged("avatarImageUrl");
					this.OnavatarImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Thread", Storage="_Threads", ThisKey="AdminID", OtherKey="AdminID")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Admin", Storage="_UserType", ThisKey="AdminType", OtherKey="TypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._AdminType = value.TypeID;
					}
					else
					{
						this._AdminType = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorID;
		
		private string _Address;
		
		private System.Nullable<int> _Age;
		
		private string _FullName;
		
		private string _Gender;
		
		private string _Phone;
		
		private System.Nullable<double> _Salary;
		
		private string _Specialization;
		
		private System.Nullable<int> _VoteStar;
		
		private System.Nullable<double> _YearOfExperience;
		
		private string _avatarImageUrl;
		
		private System.Nullable<int> _DoctorType;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnSalaryChanging(System.Nullable<double> value);
    partial void OnSalaryChanged();
    partial void OnSpecializationChanging(string value);
    partial void OnSpecializationChanged();
    partial void OnVoteStarChanging(System.Nullable<int> value);
    partial void OnVoteStarChanged();
    partial void OnYearOfExperienceChanging(System.Nullable<double> value);
    partial void OnYearOfExperienceChanged();
    partial void OnavatarImageUrlChanging(string value);
    partial void OnavatarImageUrlChanged();
    partial void OnDoctorTypeChanging(System.Nullable<int> value);
    partial void OnDoctorTypeChanged();
    #endregion
		
		public Doctor()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float")]
		public System.Nullable<double> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialization", DbType="NVarChar(30)")]
		public string Specialization
		{
			get
			{
				return this._Specialization;
			}
			set
			{
				if ((this._Specialization != value))
				{
					this.OnSpecializationChanging(value);
					this.SendPropertyChanging();
					this._Specialization = value;
					this.SendPropertyChanged("Specialization");
					this.OnSpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoteStar", DbType="Int")]
		public System.Nullable<int> VoteStar
		{
			get
			{
				return this._VoteStar;
			}
			set
			{
				if ((this._VoteStar != value))
				{
					this.OnVoteStarChanging(value);
					this.SendPropertyChanging();
					this._VoteStar = value;
					this.SendPropertyChanged("VoteStar");
					this.OnVoteStarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOfExperience", DbType="Float")]
		public System.Nullable<double> YearOfExperience
		{
			get
			{
				return this._YearOfExperience;
			}
			set
			{
				if ((this._YearOfExperience != value))
				{
					this.OnYearOfExperienceChanging(value);
					this.SendPropertyChanging();
					this._YearOfExperience = value;
					this.SendPropertyChanged("YearOfExperience");
					this.OnYearOfExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarImageUrl", DbType="VarChar(MAX)")]
		public string avatarImageUrl
		{
			get
			{
				return this._avatarImageUrl;
			}
			set
			{
				if ((this._avatarImageUrl != value))
				{
					this.OnavatarImageUrlChanging(value);
					this.SendPropertyChanging();
					this._avatarImageUrl = value;
					this.SendPropertyChanged("avatarImageUrl");
					this.OnavatarImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorType", DbType="Int")]
		public System.Nullable<int> DoctorType
		{
			get
			{
				return this._DoctorType;
			}
			set
			{
				if ((this._DoctorType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorTypeChanging(value);
					this.SendPropertyChanging();
					this._DoctorType = value;
					this.SendPropertyChanged("DoctorType");
					this.OnDoctorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Post", Storage="_Posts", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Prescriptions", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Doctor", Storage="_UserType", ThisKey="DoctorType", OtherKey="TypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._DoctorType = value.TypeID;
					}
					else
					{
						this._DoctorType = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drug")]
	public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrugID;
		
		private System.Nullable<System.DateTime> _ExpiredDay;
		
		private string _Manufacturer;
		
		private string _NameOfDrug;
		
		private EntitySet<Prescription_Detail> _Prescription_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugIDChanging(int value);
    partial void OnDrugIDChanged();
    partial void OnExpiredDayChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDayChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnNameOfDrugChanging(string value);
    partial void OnNameOfDrugChanged();
    #endregion
		
		public Drug()
		{
			this._Prescription_Details = new EntitySet<Prescription_Detail>(new Action<Prescription_Detail>(this.attach_Prescription_Details), new Action<Prescription_Detail>(this.detach_Prescription_Details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrugID
		{
			get
			{
				return this._DrugID;
			}
			set
			{
				if ((this._DrugID != value))
				{
					this.OnDrugIDChanging(value);
					this.SendPropertyChanging();
					this._DrugID = value;
					this.SendPropertyChanged("DrugID");
					this.OnDrugIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDay", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiredDay
		{
			get
			{
				return this._ExpiredDay;
			}
			set
			{
				if ((this._ExpiredDay != value))
				{
					this.OnExpiredDayChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDay = value;
					this.SendPropertyChanged("ExpiredDay");
					this.OnExpiredDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(50)")]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfDrug", DbType="NVarChar(30)")]
		public string NameOfDrug
		{
			get
			{
				return this._NameOfDrug;
			}
			set
			{
				if ((this._NameOfDrug != value))
				{
					this.OnNameOfDrugChanging(value);
					this.SendPropertyChanging();
					this._NameOfDrug = value;
					this.SendPropertyChanged("NameOfDrug");
					this.OnNameOfDrugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Prescription_Detail", Storage="_Prescription_Details", ThisKey="DrugID", OtherKey="DrugID")]
		public EntitySet<Prescription_Detail> Prescription_Details
		{
			get
			{
				return this._Prescription_Details;
			}
			set
			{
				this._Prescription_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescription_Details(Prescription_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Drug = this;
		}
		
		private void detach_Prescription_Details(Prescription_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Drug = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmergencyLevel")]
	public partial class EmergencyLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _PatientInformation;
		
		private System.Nullable<int> _Status;
		
		private int _PrescriptionID;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientInformationChanging(System.Nullable<int> value);
    partial void OnPatientInformationChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    #endregion
		
		public EmergencyLevel()
		{
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientInformation", DbType="Int")]
		public System.Nullable<int> PatientInformation
		{
			get
			{
				return this._PatientInformation;
			}
			set
			{
				if ((this._PatientInformation != value))
				{
					this.OnPatientInformationChanging(value);
					this.SendPropertyChanging();
					this._PatientInformation = value;
					this.SendPropertyChanged("PatientInformation");
					this.OnPatientInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_EmergencyLevel", Storage="_Prescription", ThisKey="PrescriptionID", OtherKey="PrescriptionID", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.EmergencyLevel1 = null;
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.EmergencyLevel1 = this;
						this._PrescriptionID = value.PrescriptionID;
					}
					else
					{
						this._PrescriptionID = default(int);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameters")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParamID;
		
		private string _Value;
		
		private string _Satus;
		
		private string _ParamName;
		
		private string _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParamIDChanging(int value);
    partial void OnParamIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnSatusChanging(string value);
    partial void OnSatusChanged();
    partial void OnParamNameChanging(string value);
    partial void OnParamNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Parameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this.OnParamIDChanging(value);
					this.SendPropertyChanging();
					this._ParamID = value;
					this.SendPropertyChanged("ParamID");
					this.OnParamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satus", DbType="NChar(10)")]
		public string Satus
		{
			get
			{
				return this._Satus;
			}
			set
			{
				if ((this._Satus != value))
				{
					this.OnSatusChanging(value);
					this.SendPropertyChanging();
					this._Satus = value;
					this.SendPropertyChanged("Satus");
					this.OnSatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParamName", DbType="NChar(10)")]
		public string ParamName
		{
			get
			{
				return this._ParamName;
			}
			set
			{
				if ((this._ParamName != value))
				{
					this.OnParamNameChanging(value);
					this.SendPropertyChanging();
					this._ParamName = value;
					this.SendPropertyChanged("ParamName");
					this.OnParamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _Address;
		
		private System.Nullable<int> _Age;
		
		private string _Email;
		
		private string _Full_Name;
		
		private string _Gender;
		
		private string _Phone;
		
		private string _Patient_State;
		
		private string _avatarImageUrl;
		
		private System.Nullable<int> _PatientType;
		
		private EntityRef<Patient_Document> _Patient_Document;
		
		private EntitySet<Thread> _Threads;
		
		private EntityRef<Vip_Account> _Vip_Account;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFull_NameChanging(string value);
    partial void OnFull_NameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPatient_StateChanging(string value);
    partial void OnPatient_StateChanged();
    partial void OnavatarImageUrlChanging(string value);
    partial void OnavatarImageUrlChanged();
    partial void OnPatientTypeChanging(System.Nullable<int> value);
    partial void OnPatientTypeChanged();
    #endregion
		
		public Patient()
		{
			this._Patient_Document = default(EntityRef<Patient_Document>);
			this._Threads = new EntitySet<Thread>(new Action<Thread>(this.attach_Threads), new Action<Thread>(this.detach_Threads));
			this._Vip_Account = default(EntityRef<Vip_Account>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Full_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Full_Name
		{
			get
			{
				return this._Full_Name;
			}
			set
			{
				if ((this._Full_Name != value))
				{
					this.OnFull_NameChanging(value);
					this.SendPropertyChanging();
					this._Full_Name = value;
					this.SendPropertyChanged("Full_Name");
					this.OnFull_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_State", DbType="NVarChar(50)")]
		public string Patient_State
		{
			get
			{
				return this._Patient_State;
			}
			set
			{
				if ((this._Patient_State != value))
				{
					this.OnPatient_StateChanging(value);
					this.SendPropertyChanging();
					this._Patient_State = value;
					this.SendPropertyChanged("Patient_State");
					this.OnPatient_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarImageUrl", DbType="VarChar(MAX)")]
		public string avatarImageUrl
		{
			get
			{
				return this._avatarImageUrl;
			}
			set
			{
				if ((this._avatarImageUrl != value))
				{
					this.OnavatarImageUrlChanging(value);
					this.SendPropertyChanging();
					this._avatarImageUrl = value;
					this.SendPropertyChanged("avatarImageUrl");
					this.OnavatarImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientType", DbType="Int")]
		public System.Nullable<int> PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientTypeChanging(value);
					this.SendPropertyChanging();
					this._PatientType = value;
					this.SendPropertyChanged("PatientType");
					this.OnPatientTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Patient_Document", Storage="_Patient_Document", ThisKey="PatientID", OtherKey="PatientInformation", IsUnique=true, IsForeignKey=false)]
		public Patient_Document Patient_Document
		{
			get
			{
				return this._Patient_Document.Entity;
			}
			set
			{
				Patient_Document previousValue = this._Patient_Document.Entity;
				if (((previousValue != value) 
							|| (this._Patient_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient_Document.Entity = null;
						previousValue.Patient = null;
					}
					this._Patient_Document.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
					}
					this.SendPropertyChanged("Patient_Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Thread", Storage="_Threads", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Thread> Threads
		{
			get
			{
				return this._Threads;
			}
			set
			{
				this._Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Vip_Account", Storage="_Vip_Account", ThisKey="PatientID", OtherKey="PatientID", IsUnique=true, IsForeignKey=false)]
		public Vip_Account Vip_Account
		{
			get
			{
				return this._Vip_Account.Entity;
			}
			set
			{
				Vip_Account previousValue = this._Vip_Account.Entity;
				if (((previousValue != value) 
							|| (this._Vip_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vip_Account.Entity = null;
						previousValue.Patient = null;
					}
					this._Vip_Account.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
					}
					this.SendPropertyChanged("Vip_Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Patient", Storage="_UserType", ThisKey="PatientType", OtherKey="TypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._PatientType = value.TypeID;
					}
					else
					{
						this._PatientType = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Threads(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Patient Document]")]
	public partial class Patient_Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _DateOfOpenDocument;
		
		private string _HostpitalName;
		
		private int _PatientInformation;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateOfOpenDocumentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfOpenDocumentChanged();
    partial void OnHostpitalNameChanging(string value);
    partial void OnHostpitalNameChanged();
    partial void OnPatientInformationChanging(int value);
    partial void OnPatientInformationChanged();
    #endregion
		
		public Patient_Document()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfOpenDocument", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfOpenDocument
		{
			get
			{
				return this._DateOfOpenDocument;
			}
			set
			{
				if ((this._DateOfOpenDocument != value))
				{
					this.OnDateOfOpenDocumentChanging(value);
					this.SendPropertyChanging();
					this._DateOfOpenDocument = value;
					this.SendPropertyChanged("DateOfOpenDocument");
					this.OnDateOfOpenDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostpitalName", DbType="NVarChar(30)")]
		public string HostpitalName
		{
			get
			{
				return this._HostpitalName;
			}
			set
			{
				if ((this._HostpitalName != value))
				{
					this.OnHostpitalNameChanging(value);
					this.SendPropertyChanging();
					this._HostpitalName = value;
					this.SendPropertyChanged("HostpitalName");
					this.OnHostpitalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientInformation", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientInformation
		{
			get
			{
				return this._PatientInformation;
			}
			set
			{
				if ((this._PatientInformation != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientInformationChanging(value);
					this.SendPropertyChanging();
					this._PatientInformation = value;
					this.SendPropertyChanged("PatientInformation");
					this.OnPatientInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Document_Prescription", Storage="_Prescriptions", ThisKey="PatientInformation", OtherKey="PatientInformation")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Patient_Document", Storage="_Patient", ThisKey="PatientInformation", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Patient_Document = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Patient_Document = this;
						this._PatientInformation = value.PatientID;
					}
					else
					{
						this._PatientInformation = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient_Document = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient_Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostID;
		
		private string _ContentOfPost;
		
		private string _PostbyDoctor;
		
		private string _PostbyPatient;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<int> _ThreadID;
		
		private System.Nullable<int> _DoctorID;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Thread> _Thread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(int value);
    partial void OnPostIDChanged();
    partial void OnContentOfPostChanging(string value);
    partial void OnContentOfPostChanged();
    partial void OnPostbyDoctorChanging(string value);
    partial void OnPostbyDoctorChanged();
    partial void OnPostbyPatientChanging(string value);
    partial void OnPostbyPatientChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnThreadIDChanging(System.Nullable<int> value);
    partial void OnThreadIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    #endregion
		
		public Post()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Thread = default(EntityRef<Thread>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentOfPost", DbType="NVarChar(200)")]
		public string ContentOfPost
		{
			get
			{
				return this._ContentOfPost;
			}
			set
			{
				if ((this._ContentOfPost != value))
				{
					this.OnContentOfPostChanging(value);
					this.SendPropertyChanging();
					this._ContentOfPost = value;
					this.SendPropertyChanged("ContentOfPost");
					this.OnContentOfPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostbyDoctor", DbType="NVarChar(50)")]
		public string PostbyDoctor
		{
			get
			{
				return this._PostbyDoctor;
			}
			set
			{
				if ((this._PostbyDoctor != value))
				{
					this.OnPostbyDoctorChanging(value);
					this.SendPropertyChanging();
					this._PostbyDoctor = value;
					this.SendPropertyChanged("PostbyDoctor");
					this.OnPostbyDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostbyPatient", DbType="NVarChar(50)")]
		public string PostbyPatient
		{
			get
			{
				return this._PostbyPatient;
			}
			set
			{
				if ((this._PostbyPatient != value))
				{
					this.OnPostbyPatientChanging(value);
					this.SendPropertyChanging();
					this._PostbyPatient = value;
					this.SendPropertyChanged("PostbyPatient");
					this.OnPostbyPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int")]
		public System.Nullable<int> ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Post", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Post", Storage="_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._ThreadID = value.ThreadID;
					}
					else
					{
						this._ThreadID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _DateOfDiagnose;
		
		private System.Nullable<System.DateTime> _DateOfReExam;
		
		private string _DiseaseName;
		
		private System.Nullable<int> _EmergencyLevel;
		
		private string _ListOfDrugs;
		
		private int _PatientInformation;
		
		private string _AttendingDoctor;
		
		private System.Nullable<int> _DoctorID;
		
		private int _PrescriptionID;
		
		private EntityRef<EmergencyLevel> _EmergencyLevel1;
		
		private EntitySet<Prescription_Detail> _Prescription_Details;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient_Document> _Patient_Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateOfDiagnoseChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfDiagnoseChanged();
    partial void OnDateOfReExamChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfReExamChanged();
    partial void OnDiseaseNameChanging(string value);
    partial void OnDiseaseNameChanged();
    partial void OnEmergencyLevelChanging(System.Nullable<int> value);
    partial void OnEmergencyLevelChanged();
    partial void OnListOfDrugsChanging(string value);
    partial void OnListOfDrugsChanged();
    partial void OnPatientInformationChanging(int value);
    partial void OnPatientInformationChanged();
    partial void OnAttendingDoctorChanging(string value);
    partial void OnAttendingDoctorChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    #endregion
		
		public Prescription()
		{
			this._EmergencyLevel1 = default(EntityRef<EmergencyLevel>);
			this._Prescription_Details = new EntitySet<Prescription_Detail>(new Action<Prescription_Detail>(this.attach_Prescription_Details), new Action<Prescription_Detail>(this.detach_Prescription_Details));
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient_Document = default(EntityRef<Patient_Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfDiagnose", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfDiagnose
		{
			get
			{
				return this._DateOfDiagnose;
			}
			set
			{
				if ((this._DateOfDiagnose != value))
				{
					this.OnDateOfDiagnoseChanging(value);
					this.SendPropertyChanging();
					this._DateOfDiagnose = value;
					this.SendPropertyChanged("DateOfDiagnose");
					this.OnDateOfDiagnoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfReExam", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfReExam
		{
			get
			{
				return this._DateOfReExam;
			}
			set
			{
				if ((this._DateOfReExam != value))
				{
					this.OnDateOfReExamChanging(value);
					this.SendPropertyChanging();
					this._DateOfReExam = value;
					this.SendPropertyChanged("DateOfReExam");
					this.OnDateOfReExamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="NVarChar(50)")]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this.OnDiseaseNameChanging(value);
					this.SendPropertyChanging();
					this._DiseaseName = value;
					this.SendPropertyChanged("DiseaseName");
					this.OnDiseaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyLevel", DbType="Int")]
		public System.Nullable<int> EmergencyLevel
		{
			get
			{
				return this._EmergencyLevel;
			}
			set
			{
				if ((this._EmergencyLevel != value))
				{
					this.OnEmergencyLevelChanging(value);
					this.SendPropertyChanging();
					this._EmergencyLevel = value;
					this.SendPropertyChanged("EmergencyLevel");
					this.OnEmergencyLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListOfDrugs", DbType="NVarChar(100)")]
		public string ListOfDrugs
		{
			get
			{
				return this._ListOfDrugs;
			}
			set
			{
				if ((this._ListOfDrugs != value))
				{
					this.OnListOfDrugsChanging(value);
					this.SendPropertyChanging();
					this._ListOfDrugs = value;
					this.SendPropertyChanged("ListOfDrugs");
					this.OnListOfDrugsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientInformation", DbType="Int NOT NULL")]
		public int PatientInformation
		{
			get
			{
				return this._PatientInformation;
			}
			set
			{
				if ((this._PatientInformation != value))
				{
					if (this._Patient_Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientInformationChanging(value);
					this.SendPropertyChanging();
					this._PatientInformation = value;
					this.SendPropertyChanged("PatientInformation");
					this.OnPatientInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendingDoctor", DbType="NVarChar(30)")]
		public string AttendingDoctor
		{
			get
			{
				return this._AttendingDoctor;
			}
			set
			{
				if ((this._AttendingDoctor != value))
				{
					this.OnAttendingDoctorChanging(value);
					this.SendPropertyChanging();
					this._AttendingDoctor = value;
					this.SendPropertyChanged("AttendingDoctor");
					this.OnAttendingDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_EmergencyLevel", Storage="_EmergencyLevel1", ThisKey="PrescriptionID", OtherKey="PrescriptionID", IsUnique=true, IsForeignKey=false)]
		public EmergencyLevel EmergencyLevel1
		{
			get
			{
				return this._EmergencyLevel1.Entity;
			}
			set
			{
				EmergencyLevel previousValue = this._EmergencyLevel1.Entity;
				if (((previousValue != value) 
							|| (this._EmergencyLevel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmergencyLevel1.Entity = null;
						previousValue.Prescription = null;
					}
					this._EmergencyLevel1.Entity = value;
					if ((value != null))
					{
						value.Prescription = this;
					}
					this.SendPropertyChanged("EmergencyLevel1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Prescription_Detail", Storage="_Prescription_Details", ThisKey="PrescriptionID", OtherKey="PrescriptionID")]
		public EntitySet<Prescription_Detail> Prescription_Details
		{
			get
			{
				return this._Prescription_Details;
			}
			set
			{
				this._Prescription_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Document_Prescription", Storage="_Patient_Document", ThisKey="PatientInformation", OtherKey="PatientInformation", IsForeignKey=true)]
		public Patient_Document Patient_Document
		{
			get
			{
				return this._Patient_Document.Entity;
			}
			set
			{
				Patient_Document previousValue = this._Patient_Document.Entity;
				if (((previousValue != value) 
							|| (this._Patient_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient_Document.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Patient_Document.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PatientInformation = value.PatientInformation;
					}
					else
					{
						this._PatientInformation = default(int);
					}
					this.SendPropertyChanged("Patient_Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescription_Details(Prescription_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_Prescription_Details(Prescription_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Prescription Detail]")]
	public partial class Prescription_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrugID;
		
		private int _PrescriptionID;
		
		private string _Dosage;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Drug> _Drug;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugIDChanging(int value);
    partial void OnDrugIDChanged();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    partial void OnDosageChanging(string value);
    partial void OnDosageChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Prescription_Detail()
		{
			this._Drug = default(EntityRef<Drug>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DrugID
		{
			get
			{
				return this._DrugID;
			}
			set
			{
				if ((this._DrugID != value))
				{
					if (this._Drug.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrugIDChanging(value);
					this.SendPropertyChanging();
					this._DrugID = value;
					this.SendPropertyChanged("DrugID");
					this.OnDrugIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dosage", DbType="NVarChar(50)")]
		public string Dosage
		{
			get
			{
				return this._Dosage;
			}
			set
			{
				if ((this._Dosage != value))
				{
					this.OnDosageChanging(value);
					this.SendPropertyChanging();
					this._Dosage = value;
					this.SendPropertyChanged("Dosage");
					this.OnDosageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_Prescription_Detail", Storage="_Drug", ThisKey="DrugID", OtherKey="DrugID", IsForeignKey=true)]
		public Drug Drug
		{
			get
			{
				return this._Drug.Entity;
			}
			set
			{
				Drug previousValue = this._Drug.Entity;
				if (((previousValue != value) 
							|| (this._Drug.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drug.Entity = null;
						previousValue.Prescription_Details.Remove(this);
					}
					this._Drug.Entity = value;
					if ((value != null))
					{
						value.Prescription_Details.Add(this);
						this._DrugID = value.DrugID;
					}
					else
					{
						this._DrugID = default(int);
					}
					this.SendPropertyChanged("Drug");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Prescription_Detail", Storage="_Prescription", ThisKey="PrescriptionID", OtherKey="PrescriptionID", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.Prescription_Details.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.Prescription_Details.Add(this);
						this._PrescriptionID = value.PrescriptionID;
					}
					else
					{
						this._PrescriptionID = default(int);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserFullName;
		
		private string _UserLoginName;
		
		private string _UserLoginPassword;
		
		private System.Nullable<int> _UserType;
		
		private EntityRef<UserType> _UserType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnUserLoginNameChanging(string value);
    partial void OnUserLoginNameChanged();
    partial void OnUserLoginPasswordChanging(string value);
    partial void OnUserLoginPasswordChanged();
    partial void OnUserTypeChanging(System.Nullable<int> value);
    partial void OnUserTypeChanged();
    #endregion
		
		public User()
		{
			this._UserType1 = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="NVarChar(50)")]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLoginName", DbType="VarChar(50)")]
		public string UserLoginName
		{
			get
			{
				return this._UserLoginName;
			}
			set
			{
				if ((this._UserLoginName != value))
				{
					this.OnUserLoginNameChanging(value);
					this.SendPropertyChanging();
					this._UserLoginName = value;
					this.SendPropertyChanged("UserLoginName");
					this.OnUserLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLoginPassword", DbType="VarChar(50)")]
		public string UserLoginPassword
		{
			get
			{
				return this._UserLoginPassword;
			}
			set
			{
				if ((this._UserLoginPassword != value))
				{
					this.OnUserLoginPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserLoginPassword = value;
					this.SendPropertyChanged("UserLoginPassword");
					this.OnUserLoginPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Int")]
		public System.Nullable<int> UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					if (this._UserType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType1", ThisKey="UserType", OtherKey="TypeID", IsForeignKey=true)]
		public UserType UserType1
		{
			get
			{
				return this._UserType1.Entity;
			}
			set
			{
				UserType previousValue = this._UserType1.Entity;
				if (((previousValue != value) 
							|| (this._UserType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserType = value.TypeID;
					}
					else
					{
						this._UserType = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thread")]
	public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThreadID;
		
		private string _Category;
		
		private string _NameOfIssue;
		
		private string _NameOfPatient;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _PatientID;
		
		private System.Nullable<int> _AdminID;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnNameOfIssueChanging(string value);
    partial void OnNameOfIssueChanged();
    partial void OnNameOfPatientChanging(string value);
    partial void OnNameOfPatientChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnAdminIDChanging(System.Nullable<int> value);
    partial void OnAdminIDChanged();
    #endregion
		
		public Thread()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Admin = default(EntityRef<Admin>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfIssue", DbType="NVarChar(50)")]
		public string NameOfIssue
		{
			get
			{
				return this._NameOfIssue;
			}
			set
			{
				if ((this._NameOfIssue != value))
				{
					this.OnNameOfIssueChanging(value);
					this.SendPropertyChanging();
					this._NameOfIssue = value;
					this.SendPropertyChanged("NameOfIssue");
					this.OnNameOfIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfPatient", DbType="NVarChar(50)")]
		public string NameOfPatient
		{
			get
			{
				return this._NameOfPatient;
			}
			set
			{
				if ((this._NameOfPatient != value))
				{
					this.OnNameOfPatientChanging(value);
					this.SendPropertyChanging();
					this._NameOfPatient = value;
					this.SendPropertyChanged("NameOfPatient");
					this.OnNameOfPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int")]
		public System.Nullable<int> AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Post", Storage="_Posts", ThisKey="ThreadID", OtherKey="ThreadID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_Thread", Storage="_Admin", ThisKey="AdminID", OtherKey="AdminID", IsForeignKey=true)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._AdminID = value.AdminID;
					}
					else
					{
						this._AdminID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Thread", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Threads.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Threads.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public UserType()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Admin", Storage="_Admins", ThisKey="TypeID", OtherKey="AdminType")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Doctor", Storage="_Doctors", ThisKey="TypeID", OtherKey="DoctorType")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Patient", Storage="_Patients", ThisKey="TypeID", OtherKey="PatientType")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="TypeID", OtherKey="UserType")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Vip Account]")]
	public partial class Vip_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Expired_Day;
		
		private string _Private_Doctor;
		
		private System.Nullable<int> _Visa_Card_Number;
		
		private int _PatientID;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpired_DayChanging(System.Nullable<System.DateTime> value);
    partial void OnExpired_DayChanged();
    partial void OnPrivate_DoctorChanging(string value);
    partial void OnPrivate_DoctorChanged();
    partial void OnVisa_Card_NumberChanging(System.Nullable<int> value);
    partial void OnVisa_Card_NumberChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    #endregion
		
		public Vip_Account()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expired_Day", DbType="Date")]
		public System.Nullable<System.DateTime> Expired_Day
		{
			get
			{
				return this._Expired_Day;
			}
			set
			{
				if ((this._Expired_Day != value))
				{
					this.OnExpired_DayChanging(value);
					this.SendPropertyChanging();
					this._Expired_Day = value;
					this.SendPropertyChanged("Expired_Day");
					this.OnExpired_DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Private_Doctor", DbType="NVarChar(50)")]
		public string Private_Doctor
		{
			get
			{
				return this._Private_Doctor;
			}
			set
			{
				if ((this._Private_Doctor != value))
				{
					this.OnPrivate_DoctorChanging(value);
					this.SendPropertyChanging();
					this._Private_Doctor = value;
					this.SendPropertyChanged("Private_Doctor");
					this.OnPrivate_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visa_Card_Number", DbType="Int")]
		public System.Nullable<int> Visa_Card_Number
		{
			get
			{
				return this._Visa_Card_Number;
			}
			set
			{
				if ((this._Visa_Card_Number != value))
				{
					this.OnVisa_Card_NumberChanging(value);
					this.SendPropertyChanging();
					this._Visa_Card_Number = value;
					this.SendPropertyChanged("Visa_Card_Number");
					this.OnVisa_Card_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Vip_Account", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Vip_Account = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Vip_Account = this;
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
